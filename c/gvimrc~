"-----------------------------------------------------------------------------
" Buzz's vimrc 
" Yao-Lun Ku <ylku.buzz[At]gmail[Dot]com>
" https://github.com/ylku/VIM
"-----------------------------------------------------------------------------
" For pathogen.vim: auto load all plugins in .vim/bundle
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

"syntax on
syntax enable
set t_Co=256
"set t_AB=^[[48;5;%dm
"set t_AF=^[[38;5;%dm

if has("gui_running")
    set background=light
else
    set background=dark
    "set statusline=%{HasPaste()}%F%m%r%h%w\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
endif

"colors molokai
"colors inkpot
"colors desert
"colors wombat256
colors 256-grayvim

let g:solarized_termcolors=256
"colors solarized

"let g:machine_type = 'mac'
let g:machine_type = 'normal'


function! HasPaste()
    if &paste
        return '[PASTE]'
    else
        return ''
    endif
endfunction

function! UpdateCscopeDatabase()
    :cs kill 0
    :cs add cscope.out
endfunction

nmap <F5> :call UpdateCscopeDatabase() <CR>


"----------------------------------------------------------------------------
" General setting
"----------------------------------------------------------------------------
set colorcolumn=120     " Right margin "
set nocompatible		" not compatible with the old-fashion vi mode
set ruler				" show the cursor position all the time
set cursorline          " highlight current line "
"highlight CursorLine          guibg=#003853 ctermbg=255  gui=none cterm=none
set autoread            " auto read when file is changed from outside 
set laststatus=2
set history=50          " keep 50 lines of command line history
set showmode			" Show current mode
set showmatch			" Cursor shows matching ) and }
set wildchar=<TAB>		" Start wild expansion in the command line using <TAB>
set wildmenu			" wild char competion menu
set bs=2                " allow backspacing over everything in insert mode

filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

" auto reload vimrc when editing it
autocmd! bufwritepost .vimrc source ~/.vimrc

" ignore these files while expanding wild chars
set wildignore=*.o,*.dep

set noerrorbells        " Disable sound on errors "
set novisualbell        " Disable visual bell "

"Restore cursor to file position in previous editing session
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"----------------------------------------------------------------------------
"           TAB setting
"----------------------------------------------------------------------------
" Replace <TAB> with space. 
" Hitting Tab in insert mode will produce the appropriate number of spaces
"----------------------------------------------------------------------------
set expandtab		" replace <TAB> with spaces
set softtabstop=4

" Set shiftwidth to control how many columns text is indented with the reindent
" operations (<< and >>) and automatic C-style indentation.
set shiftwidth=4    " Vim incident <n> space
set tabstop=4       " tell vim how many columns a tab counts for
"set smarttab			" insert tabs on the start of a line according to context

au FileType Makefile set noexpandtab " Do not expandtab while type is Makefile

" Visualizing tabs
syntax match Tab /\t/
hi Tab gui=underline guifg=blue ctermbg=blue

"----------------------------------------------------------------------------
"               Format automatically
"----------------------------------------------------------------------------
set autoindent
set cindent
set comments=sl:/*,mb:**,elx:*
set copyindent      " copy the previous indentation on autoindenting
"set smartindent    

"----------------------------------------------------------------------------
"               Searching
"----------------------------------------------------------------------------
set hlsearch            " highlight search
set incsearch			" incremental search
set ignorecase			" ignore case when searching
set smartcase			" ignore case if search pattern is all lowercase,case-sensitive otherwise

"----------------------------------------------------------------------------
"               Mapping (map, nmap, ...)
"----------------------------------------------------------------------------
" Replace leader with , (default is \)
let mapleader=","
let g:mapleader=","

" Use :update to reprace :w(Vim only).
" Save file if there is any change
map <F2> :up<CR>
"save and exit
map <F3> :up<CR>:q<CR>      
"exit without saving
map <F4> :q!<CR>            

"Toggle on/off syntax_on
map <F7> :if exists("syntax_on") <BAR>
     \   syntax off <BAR><CR>
          \ else <BAR>
               \   syntax enable <BAR>
                    \ endif <CR>

if machine_type == 'mac'
    " Toggle on/off highlight Search
    nmap <leader>hl :set hls!<BAR>set hls?<CR>

    " Toggle on/off paste mode
    nmap <leader>p :set paste!<BAR>set paste?<CR>

    map <leader>t <ESC>:TagbarToggle<CR>

    map <leader>n <ESC>:NERDTreeToggle<CR>

    " To start exploring in the current window, use: > \be   or   :BufExplorer
    map <leader>bb <ESC>:BufExplorer<CR>            
    " To start exploring in a newly split horizontal window, use: > \bs   or   :BufExplorerHorizontalSplit
    map <leader>bs <ESC>:BufExplorerHorizontalSplit<CR>
    " To start exploring in a newly split vertical window, use: > \bv   or   :BufExplorerVerticalSplit
    map <leader>bv <ESC>:BufExplorerVerticalSplit<CR>
else
    nnoremap <silent> <F8> :NERDTreeToggle<CR>

    " To start exploring in the current window, use: > \be   or   :BufExplorer
    nnoremap <F9> <ESC>:BufExplorer<CR>            
    " To start exploring in a newly split horizontal window, use: > \bs   or   :BufExplorerHorizontalSplit
    map <leader>bs <ESC>:BufExplorerHorizontalSplit<CR>
    " To start exploring in a newly split vertical window, use: > \bv   or   :BufExplorerVerticalSplit
    map <leader>bv <ESC>:BufExplorerVerticalSplit<CR>

    " Toggle TagBar
    nnoremap <silent> <F10> :TagbarToggle<CR> 

    " Toggle on/off highlight Search
    nmap <F11> :set hls!<BAR>set hls?<CR>

    " Toggle on/off paste mode
    map <F12> :set paste!<BAR>set paste?<CR>
    set pastetoggle=<F12>
endif
" +--------------------------------+
" |         split windows          |
" +--------------------------------+
" Move to and maximize the below split
map <C-J> <C-W>j<C-W>_
" Move to and maximize the above split
map <C-K> <C-W>k<C-W>_
" Move to and maximize the right split
nmap <C-H> <C-W>l<C-W><bar>
" Move to and maximize the left split
nmap <C-L> <C-W>h<C-W><bar>



" +--------------------------------+
" |         Indentation            |
" +--------------------------------+
" Multiline indent/un-indent (V mode)
vmap > >gv
vmap < <gv
" Current line indent/un-indent (N mode)
nmap > v><ESC>
nmap < v<<ESC>


" +--------------------------------+
" |             ctags              |
" +--------------------------------+
" Ctrl+T, Navigating to the function definition from ‘function call’
map <C-N> <C-T>
" Ctrl+], Returning back again to function call from the definition
map <C-M> <C-]>

" +--------------------------------+
" |            Cscope              |
" +--------------------------------+
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"show lines with matching word under cursor
nmap <leader>lns [I

"========== imap ============
"example: imap ;so System.out.println();<left><left>
"example: imap ;ne <esc>/;<cr>a



"----------------------------------------------------------------------------
"             Encoding
"----------------------------------------------------------------------------
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8



"----------------------------------------------------------------------------
"           Plugin (.vim/bundle/*)
"----------------------------------------------------------------------------
" +--------------------------------+
" |         EasyMotion             |
" +--------------------------------+
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

"hi EasyMotionTarget ctermbg=black ctermfg=196
"hi EasyMotionShade  ctermbg=none ctermfg=grey
" +--------------------------------+
" |         vim-powerline          |
" +--------------------------------+
"   Doesn't use any special characters.
    "let g:Powerline_symbols = 'compatible'
"   Simulates icons and arrows using similar unicode glyphs.
    "let g:Powerline_symbols = 'unicode'
"   Custom icons and arrows. Requires a patched font.
    let g:Powerline_symbols = 'fancy'


" +--------------------------------+
" |            nerdtree            |
" +--------------------------------+


" +--------------------------------+
" |            bufexplorer         |
" +--------------------------------+


" +--------------------------------+
" |             Tagbar             |
" +--------------------------------+
" set focus to TagBar when opening it
let g:tagbar_autofocus = 1



"----------------------------------------------------------------------------
"             Cscope
"----------------------------------------------------------------------------
if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif
